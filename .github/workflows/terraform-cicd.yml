name: 'Terraform CI/CD'

on:
  push:
    branches: [main]
    paths:
      - '**.tf'
  pull_request:
    paths:
      - '**.tf'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get Terraform version
        id: terraform-version
        uses: dflook/terraform-version@v1

      - name: Print Terraform version
        run: echo "Terraform version: ${{ steps.terraform-version.outputs.terraform }}"

      - name: Print Terraform provider versions
        run: echo "Terraform  provider versions: ${{ steps.terraform-version.outputs }}"

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.terraform-version.outputs.terraform }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Run Terratest
        uses: cloudposse/github-action-terratest@main
        with:
          sourceDir: test/

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v1

      - name: Terraform Graph output
        if: github.event_name == 'pull_request'
        run: terraform graph -draw-cycles -type=plan | dot -Tsvg -o graph.svg

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
